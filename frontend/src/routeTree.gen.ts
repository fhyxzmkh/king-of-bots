/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as RecordIndexImport } from './routes/record/index'
import { Route as RanklistIndexImport } from './routes/ranklist/index'
import { Route as PkIndexImport } from './routes/pk/index'
import { Route as UserBotIndexImport } from './routes/user/bot/index'
import { Route as UserAccountRegisterIndexImport } from './routes/user/account/register/index'
import { Route as UserAccountLoginIndexImport } from './routes/user/account/login/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RecordIndexRoute = RecordIndexImport.update({
  id: '/record/',
  path: '/record/',
  getParentRoute: () => rootRoute,
} as any)

const RanklistIndexRoute = RanklistIndexImport.update({
  id: '/ranklist/',
  path: '/ranklist/',
  getParentRoute: () => rootRoute,
} as any)

const PkIndexRoute = PkIndexImport.update({
  id: '/pk/',
  path: '/pk/',
  getParentRoute: () => rootRoute,
} as any)

const UserBotIndexRoute = UserBotIndexImport.update({
  id: '/user/bot/',
  path: '/user/bot/',
  getParentRoute: () => rootRoute,
} as any)

const UserAccountRegisterIndexRoute = UserAccountRegisterIndexImport.update({
  id: '/user/account/register/',
  path: '/user/account/register/',
  getParentRoute: () => rootRoute,
} as any)

const UserAccountLoginIndexRoute = UserAccountLoginIndexImport.update({
  id: '/user/account/login/',
  path: '/user/account/login/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/pk/': {
      id: '/pk/'
      path: '/pk'
      fullPath: '/pk'
      preLoaderRoute: typeof PkIndexImport
      parentRoute: typeof rootRoute
    }
    '/ranklist/': {
      id: '/ranklist/'
      path: '/ranklist'
      fullPath: '/ranklist'
      preLoaderRoute: typeof RanklistIndexImport
      parentRoute: typeof rootRoute
    }
    '/record/': {
      id: '/record/'
      path: '/record'
      fullPath: '/record'
      preLoaderRoute: typeof RecordIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/bot/': {
      id: '/user/bot/'
      path: '/user/bot'
      fullPath: '/user/bot'
      preLoaderRoute: typeof UserBotIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/account/login/': {
      id: '/user/account/login/'
      path: '/user/account/login'
      fullPath: '/user/account/login'
      preLoaderRoute: typeof UserAccountLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/account/register/': {
      id: '/user/account/register/'
      path: '/user/account/register'
      fullPath: '/user/account/register'
      preLoaderRoute: typeof UserAccountRegisterIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pk': typeof PkIndexRoute
  '/ranklist': typeof RanklistIndexRoute
  '/record': typeof RecordIndexRoute
  '/user/bot': typeof UserBotIndexRoute
  '/user/account/login': typeof UserAccountLoginIndexRoute
  '/user/account/register': typeof UserAccountRegisterIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pk': typeof PkIndexRoute
  '/ranklist': typeof RanklistIndexRoute
  '/record': typeof RecordIndexRoute
  '/user/bot': typeof UserBotIndexRoute
  '/user/account/login': typeof UserAccountLoginIndexRoute
  '/user/account/register': typeof UserAccountRegisterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/pk/': typeof PkIndexRoute
  '/ranklist/': typeof RanklistIndexRoute
  '/record/': typeof RecordIndexRoute
  '/user/bot/': typeof UserBotIndexRoute
  '/user/account/login/': typeof UserAccountLoginIndexRoute
  '/user/account/register/': typeof UserAccountRegisterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pk'
    | '/ranklist'
    | '/record'
    | '/user/bot'
    | '/user/account/login'
    | '/user/account/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pk'
    | '/ranklist'
    | '/record'
    | '/user/bot'
    | '/user/account/login'
    | '/user/account/register'
  id:
    | '__root__'
    | '/'
    | '/pk/'
    | '/ranklist/'
    | '/record/'
    | '/user/bot/'
    | '/user/account/login/'
    | '/user/account/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PkIndexRoute: typeof PkIndexRoute
  RanklistIndexRoute: typeof RanklistIndexRoute
  RecordIndexRoute: typeof RecordIndexRoute
  UserBotIndexRoute: typeof UserBotIndexRoute
  UserAccountLoginIndexRoute: typeof UserAccountLoginIndexRoute
  UserAccountRegisterIndexRoute: typeof UserAccountRegisterIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PkIndexRoute: PkIndexRoute,
  RanklistIndexRoute: RanklistIndexRoute,
  RecordIndexRoute: RecordIndexRoute,
  UserBotIndexRoute: UserBotIndexRoute,
  UserAccountLoginIndexRoute: UserAccountLoginIndexRoute,
  UserAccountRegisterIndexRoute: UserAccountRegisterIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/pk/",
        "/ranklist/",
        "/record/",
        "/user/bot/",
        "/user/account/login/",
        "/user/account/register/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/pk/": {
      "filePath": "pk/index.tsx"
    },
    "/ranklist/": {
      "filePath": "ranklist/index.tsx"
    },
    "/record/": {
      "filePath": "record/index.tsx"
    },
    "/user/bot/": {
      "filePath": "user/bot/index.tsx"
    },
    "/user/account/login/": {
      "filePath": "user/account/login/index.tsx"
    },
    "/user/account/register/": {
      "filePath": "user/account/register/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
