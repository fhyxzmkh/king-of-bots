/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as RecordIndexImport } from './routes/record/index'
import { Route as RanklistIndexImport } from './routes/ranklist/index'
import { Route as PkIndexImport } from './routes/pk/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RecordIndexRoute = RecordIndexImport.update({
  id: '/record/',
  path: '/record/',
  getParentRoute: () => rootRoute,
} as any)

const RanklistIndexRoute = RanklistIndexImport.update({
  id: '/ranklist/',
  path: '/ranklist/',
  getParentRoute: () => rootRoute,
} as any)

const PkIndexRoute = PkIndexImport.update({
  id: '/pk/',
  path: '/pk/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/pk/': {
      id: '/pk/'
      path: '/pk'
      fullPath: '/pk'
      preLoaderRoute: typeof PkIndexImport
      parentRoute: typeof rootRoute
    }
    '/ranklist/': {
      id: '/ranklist/'
      path: '/ranklist'
      fullPath: '/ranklist'
      preLoaderRoute: typeof RanklistIndexImport
      parentRoute: typeof rootRoute
    }
    '/record/': {
      id: '/record/'
      path: '/record'
      fullPath: '/record'
      preLoaderRoute: typeof RecordIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pk': typeof PkIndexRoute
  '/ranklist': typeof RanklistIndexRoute
  '/record': typeof RecordIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pk': typeof PkIndexRoute
  '/ranklist': typeof RanklistIndexRoute
  '/record': typeof RecordIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/pk/': typeof PkIndexRoute
  '/ranklist/': typeof RanklistIndexRoute
  '/record/': typeof RecordIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/pk' | '/ranklist' | '/record'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/pk' | '/ranklist' | '/record'
  id: '__root__' | '/' | '/pk/' | '/ranklist/' | '/record/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PkIndexRoute: typeof PkIndexRoute
  RanklistIndexRoute: typeof RanklistIndexRoute
  RecordIndexRoute: typeof RecordIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PkIndexRoute: PkIndexRoute,
  RanklistIndexRoute: RanklistIndexRoute,
  RecordIndexRoute: RecordIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/pk/",
        "/ranklist/",
        "/record/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/pk/": {
      "filePath": "pk/index.tsx"
    },
    "/ranklist/": {
      "filePath": "ranklist/index.tsx"
    },
    "/record/": {
      "filePath": "record/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
